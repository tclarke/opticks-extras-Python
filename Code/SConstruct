# recreate the top level SConstruct so we can
# build these independent of the core

import os
import os.path
import subprocess
import sys

####
# Set up the options and environment
####
vars = Variables()
vars.Add(BoolVariable('RELEASE','False for debug, true for release',0))
vars.Add(BoolVariable('SDKDEBUG', 'True if linking against a debug mode SDK',0))
vars.Add(EnumVariable('PYTHONVERSION', 'Version of Python to link against.',"26",allowed_values=("24","25","26")))
vars.Add('BUILDDIR','Directory for build files','#/Build')
default_bits = '64'
if sys.platform.startswith("win"):
   default_bits = '32'
vars.Add(EnumVariable("BITS", '32 for 32-bit build, 64 for 64-bit build',default_bits,['32','64']))

SDKDIR = Dir(os.environ["OPTICKS_CODE_DIR"])
TOOLPATH = [Dir("%s/application/CompileSettings" % SDKDIR).abspath, Dir("#/CompileSettings").abspath]
OPTICKSPLATFORM = "unknown"
TARGET_ARCH = ""

temp_env = Environment(variables=vars)
if sys.platform.startswith("win32"):
   if temp_env["BITS"] == "32":
      OPTICKSPLATFORM = "Win32"
      TARGET_ARCH = "x86"
   else:
      OPTICKSPLATFORM = "x64"
      TARGET_ARCH = "x86_64"
   OS = "windows"
else:
   OPTICKSPLATFORM = "%s-%s" % (os.environ['OSTYPE'],os.environ['MACHTYPE'])
   OS = "solaris"

if temp_env['RELEASE']:
   MODE='release'
else:
   MODE='debug'
dep_path = os.environ.get('PYTHONDEPENDENCIES', None)
if not dep_path:
   raise Exception("PYTHONDEPENDENCIES is not set")
dep_path = os.path.join(dep_path, temp_env["BITS"])
if not os.path.exists(dep_path):
   raise Exception("Dependencies of %s does not exist" % dep_path)
OPTICKSDEPENDENCIESINCLUDE="%s/include" % dep_path
env = Environment(variables=vars,
                  OPTICKSPLATFORM=OPTICKSPLATFORM,
                  OPTICKSDEPENDENCIESBIN="%s/bin" % dep_path,
                  OPTICKSDEPENDENCIESINCLUDE=OPTICKSDEPENDENCIESINCLUDE,
                  OS=OS,
                  MODE=MODE,
                  ENV=os.environ,
                  TARGET_ARCH=TARGET_ARCH,
                  MSVC_VERSION="10.0",
                  tools=["default", "qt4"],
                  toolpath=TOOLPATH)
if env['SDKDEBUG']:
   SDKMODE='debug'
else:
   SDKMODE='release'
BUILDDIR = env.Dir(env["BUILDDIR"]).abspath
env["BINDIR"] = '%s/Build/Binaries-%s-%s/Bin' % (SDKDIR,OPTICKSPLATFORM,SDKMODE)
env["PLUGINDIR"] = '%s/Binaries-%s-%s/PlugIns' % (BUILDDIR,OPTICKSPLATFORM,MODE)
env["LIBDIR"] = '%s/Build/Binaries-%s-%s/Lib' % (SDKDIR,OPTICKSPLATFORM,SDKMODE)
env["PDBDIR"] = '%s/Binaries-%s-%s/Pdbs' % (BUILDDIR,OPTICKSPLATFORM,MODE)
if OS == "windows":
   env["BUILDDIR"] = '%s/%s/%s/PlugIns' % (BUILDDIR,OPTICKSPLATFORM,MODE)
else:
   env["BUILDDIR"] = '%s/%s-%s/PlugIns' % (BUILDDIR,OPTICKSPLATFORM,MODE)
env["COREDIR"] = "%s/application" % SDKDIR
env["SDKDIR"] = SDKDIR

Help(vars.GenerateHelpText(env))
env["QT_MODULES"] = ["QtCore","QtGui","Qt3Support"]
env.Qt4AddModules(env["QT_MODULES"])
env.AppendUnique(CXXFLAGS=["-I%s" % OPTICKSDEPENDENCIESINCLUDE])

env['SHLIBPREFIX'] = ""
env.Append(CPPDEFINES=["_USEDLL"],
           LIBPATH=env["LIBDIR"])
if OPTICKSPLATFORM == 'solaris-sparc':
   env.Append(CXXFLAGS="-library=stlport4 -m64 -xcode=pic32 -erroff=nonewline",
          SHLINKFLAGS="-library=stlport4 -m64 -xcode=pic32 -mt -L/usr/sfw/lib/sparcv9",
          LIBS=env["QT_MODULES"] + ["PlugInLib","PlugInUtilities","PlugInLib","nsl","dl","GLU","GL","Xm","Xext","X11","m"])
elif OPTICKSPLATFORM == "linux-x86_64":
   env.Append(CXXFLAGS="-m64 -fpic -w",
          LINKFLAGS="-melf_x86_64 -Wl,-E",
          LIBS=env["QT_MODULES"] + ["PlugInLib","PlugInUtilities","PlugInLib","dl","GLU","GL","Xext","Xrender","X11","m"])
elif OS == "windows":
   if OPTICKSPLATFORM == "Win32":
      env.AppendUnique(CXXFLAGS=["/arch:SSE"], LINKFLAGS=['/MACHINE:X86'])
   else:
      env.AppendUnique(LINKFLAGS=['/MACHINE:X64'])
   env["PDB"] ="${PDBDIR}/${TARGET.filebase}.pdb"
   if MODE == "debug" and OPTICKSPLATFORM == "Win32":
      env.AppendUnique(CXXFLAGS=['/Gy'])
   env.AppendUnique(CXXFLAGS=['/EHsc', '/W3', '/wd4996', '/wd4267', '/wd4250', '/errorReport:prompt', '/GR'],
              CPPDEFINES=["WIN32", "NOMINMAX"],
              LINKFLAGS=['/MAPINFO:EXPORTS', '/MAP', '/DEBUG', '/SUBSYSTEM:WINDOWS', '/LARGEADDRESSAWARE'],
              LIBS=["PlugInLib", "PlugInUtilities", "opengl32", "glu32", "advapi32", "shell32"],
              LIBPATH=[env["LIBDIR"]])
   if MODE == 'release':
      env.AppendUnique(CXXFLAGS=['/O2', '/Ob2', '/Oi', '/Ot', '/Oy', '/GF', '/GS-', '/MD'])
      env.AppendUnique(LIBS=["qtmain", "Qt3Support4", "QtCore4", "QtGui4", "QtOpenGL4", "QtXml4"])
      env.AppendUnique(LINKFLAGS=['/OPT:NOREF', '/OPT:NOICF', '/INCREMENTAL:NO', '/NODEFAULTLIB:"libc.lib"', '/NODEFAULTLIB:"libcmt.lib"', '/NODEFAULTLIB:"msvcrtd.lib"', '/NODEFAULTLIB:"libcd.lib"', '/NODEFAULTLIB:"libcmtd.lib"'])
   else:
      env.AppendUnique(LIBPATH=["%s/lib/debug" % dep_path])
      env.AppendUnique(CXXFLAGS=['/Od', '/RTC1', '/RTCc', '/MDd'])
      env.AppendUnique(CPPDEFINES=["DEBUG"])
      env.AppendUnique(LIBS=["qtmaind", "Qt3Supportd4", "QtCored4", "QtGuid4", "QtOpenGLd4", "QtXmld4"])
      env.AppendUnique(LINKFLAGS=['/INCREMENTAL', '/NODEFAULTLIB:"libc.lib"', '/NODEFAULTLIB:"libcmt.lib"', '/NODEFAULTLIB:"msvcrt.lib"', '/NODEFAULTLIB:"libcd.lib"', '/NODEFAULTLIB:"libcmtd.lib"'])

env.AppendUnique(LIBPATH=["%s/lib" % dep_path])
env.BuildDir(env["BUILDDIR"], "#", duplicate=0)

if OS != "windows":
   if MODE == 'release':
      if OPTICKSPLATFORM == "solaris-sparc":
         env.Append(CXXFLAGS="-xO3")
      else:
         env.Append(CXXFLAGS="-O3")
   else:
      env.Append(CXXFLAGS="-g")
      env.Append(CPPDEFINES=["DEBUG"])

plugins = map(lambda x: os.path.basename(x),
              map(lambda x: x[0],
                  filter(lambda x: 'ModuleManager.cpp' in x[2] or 'modulemanager.cpp' in x[2],os.walk('.'))))

# check for extra vars
if os.path.exists(".extravars"):
   fp=open(".extravars","r")
   exec(fp.read())
   fp.close()

incdirs = [".",
           "#/Include",
           "$COREDIR/Interfaces",
           "$COREDIR/PlugInLib",
           "$COREDIR/PlugInUtilities/Interfaces",
           "$COREDIR/PlugInUtilities/pthreads-wrapper"]
env.Append(CPPPATH=incdirs)

libs = []
Export('env','MODE','TOOLPATH','SDKDIR')

for plugin in plugins:
   if not os.path.isfile('%s/SConscript' % plugin):
      print "%s does not have an SConscript file." % plugin
      continue
   src_dir = '#/%s' % plugin
   build_dir = '%s/%s' % (env["BUILDDIR"], plugin)
   env.BuildDir(build_dir, src_dir, duplicate=0)
   libs.append(env.SConscript('%s/SConscript' % plugin, exports='build_dir'))

####
# Install the plug-ins to the proper directories
# and set up some useful aliases
####
all = env.Alias('all', libs)
Default(all)
