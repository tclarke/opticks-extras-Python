import unittest
import opticks
import ctypes
import _opticks

def runTests(*args):
   args = map(lambda x: "opticks.test.%s" % x, args)
   if len(args) == 0: args.append("opticks.test")
   import sys
   runner = unittest.TextTestRunner(sys.stdout, verbosity=2)
   suite = unittest.TestLoader().loadTestsFromNames(args)
   runner.run(suite)

def loadTestFile(name, batch=False):
   "Load a file from the current test data path."
   import os.path
   loadFile = opticks._genwrap("loadFile", ctypes.c_uint32, ctypes.c_char_p, ctypes.c_int)
   getTestDataPath = opticks._genwrap("getTestDataPath", ctypes.c_uint32, ctypes.c_char_p, ctypes.c_uint32)
   path = os.path.join(opticks._stringBufferWrap(getTestDataPath), name)
   rval = loadFile(path, int(batch))
   return rval

class ErrorsTestCase(unittest.TestCase):
   def tearDown(self):
      opticks._setLastError(opticks.SimpleApiError.SIMPLE_NO_ERROR)

   def testErrorSet(self):
      opticks._setLastError(opticks.SimpleApiError.SIMPLE_WRONG_TYPE)
      self.assertEqual(opticks._getLastError(), opticks.SimpleApiError.SIMPLE_WRONG_TYPE)

class AnimationTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif"))
      self.v = opticks.View()

   def tearDown(self):
      self.v.destroy()
      self.v = None

   def testAnimationGet(self):
      pass

class AnimationCallbackTestCase(unittest.TestCase):
   def setUp(self):
      self.anim = opticks.Animation('foo',create=True)
      self.deleter = None

   def tearDown(self):
      self.anim.destroy()
      self.anim = None
      self.deleter = None

   def testCallbackDeletion(self):
      self.anim.activate()
      def cb(*args): pass
      self.deleter = self.anim.callback('bar',cb,3)

class DataVariantTestCase(unittest.TestCase):
   def _stringTest(self, typ, val):
      d = opticks.DataVariant(val, typ)
      self.failUnless(d.valid)
      self.failUnlessEqual(d.xml, val)

   def _valTest(self, typ, val):
      d = opticks.DataVariant(val)
      self.failUnless(d.valid)
      self.failUnlessEqual(d.dvtype, typ)
      if typ == "float" or typ == "double":
         self.failUnlessAlmostEqual(d.value, val)
      else:
         self.failUnlessEqual(d.value, val)

   def testCreateFromString(self):
      import sys
      self._stringTest("DateTime", "2009-01-02T15:30:10Z")
      if sys.platform == "win32":
         self._stringTest("Filename", "file:///C:/this/is/a/path.ext")
      else:
         self._stringTest("Filename", "file:///this/is/a/path.ext")
      self._stringTest("char", "-2")
      self._stringTest("unsigned char", "2")
      self._stringTest("short", "-300")
      self._stringTest("unsigned short", "300")
      self._stringTest("int", "-40000")
      self._stringTest("unsigned int", "40000")
      self._stringTest("Int64", "-1000000000000")
      self._stringTest("UInt64", "1000000000000")
      self._stringTest("float", "1.2345")
      self._stringTest("double", "1.23456785830939")
      self._stringTest("bool", "true")
      self._stringTest("string", "this is a string")
      self._stringTest("ColorType", "#11223355")
      self._stringTest("ColorType", "InvalidColor")
      self._stringTest("LocationType", "42.0049 -60.1234567891")
      # not going to test every enum type, just a few reprsentatives
      self._stringTest("AnimationCycle", "play_once")
      self._stringTest("ComplexComponent", "Phase")
      self._stringTest("ProcessingLocation", "onDiskReadOnly")

   def testCreateFromPythonValue(self):
      self._valTest("string", "this is a string")
      self._valTest("char", -2)
      self._valTest("short", -300)
      self._valTest("int", -40000)
      self._valTest("Int64", -10000000000)
      self._valTest("unsigned char", 200)
      self._valTest("unsigned short", 32000)
      self._valTest("unsigned int", 3000000000)
      self._valTest("UInt64", 100000000000)
      self._valTest("float", 1.23)

   def testPositiveErrors(self):
      self.failUnlessRaises(opticks.SimpleApiError, opticks.DataVariant, "bad value", "int")
      self.failUnlessRaises(opticks.SimpleApiError, opticks.DataVariant, "9999", "char")
      self.failIf(opticks.DataVariant().valid)
      val=1.23456789012345678
      d=opticks.DataVariant(val)
      self.failUnless(d.valid)
      self.failUnlessEqual(d.dvtype, "float")
      self.failIfEqual(d.value, val)

class PlugInArgTestCase(unittest.TestCase):
   def setUp(self):
      self.p = opticks.PlugIn("Passthrough PlugIn")

   def tearDown(self):
      del self.p

   def testValues(self):
      pial = self.p.inArgList
      self.failUnlessEqual(len(pial), 1)
      self.failUnlessEqual(pial.keys()[0], 'Input Integer')
      self.failUnlessEqual(pial[0].name, pial['Input Integer'].name)
      self.failUnlessEqual(pial[0].type, 'unsigned int')
      self.failUnless(pial[0].isDefaultSet())
      self.failIf(pial[0].isActualSet())
      self.failUnlessEqual(pial[0].default, 10)

   def testSet(self):
      pial = self.p.inArgList
      self.failUnlessEqual(pial[0].value, pial[0].default)
      pial[0].actual = 42
      self.failUnless(pial[0].isActualSet())
      self.failUnlessEqual(pial[0].value, pial[0].actual)
      self.failUnlessEqual(pial[0].value, 42)

class ExecuteTestCase(unittest.TestCase):
   def setUp(self):
      self.p = opticks.PlugIn("Passthrough PlugIn")

   def tearDown(self):
      del self.p

   def testPassthrough(self):
      self.failUnless(self.p())
      self.failUnlessEqual(self.p.inArgList[0].value, self.p.outArgList[0].value)

   def testPassthroughNonDefault(self):
      self.p.inArgList[0].actual = 42
      self.failUnless(self.p())
      self.failUnlessEqual(self.p.outArgList[0].actual, 42)

class PcaTestCase(unittest.TestCase):
   def setUp(self):
      self.p = opticks.PlugIn("Principal Component Analysis")
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif", True))
      self.de = opticks.DataElement("ir_bushehr_06jun02_ps.tif")
      self.pde = None

   def tearDown(self):
      if self.de: self.de.destroy()
      if self.pde: self.pde.destroy()
      self.de, self.pde = None, None

   def testPca(self):
      self.p.inArgList['Data Element'].actual = self.de
      self.failUnless(self.p.inArgList['Data Element'].isActualSet())
      self.p.inArgList['Transform Type'].actual = "Correlation Coefficient"
      self.failUnless(self.p())
      self.failUnless(self.p.outArgList['Corrected Data Cube'].isActualSet())
      self.pde = opticks.DataElement(subtypeAsVoid=self.p.outArgList['Corrected Data Cube'].actual, typ="RasterElement")

class GeoTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif"))
      self.re = opticks.DataElement("ir_bushehr_06jun02_ps.tif")
      self.gcps = opticks.DataElement("ir_bushehr_06jun02_ps.tif|Corner Coordinates")

   def tearDown(self):
      self.gcps = None
      self.re.destroy()
      self.re = None

   def testCount(self):
      self.failUnlessEqual(opticks._getGcpCount(self.gcps), 5)

   def testGetPoint(self):
      point = opticks._getGcpPoint(self.gcps, 1)
      self.failUnlessAlmostEqual(0.0, point.pixelX)
      self.failUnlessAlmostEqual(996.0, point.pixelY)
      self.failUnlessAlmostEqual(28.82643037, point.latitude)
      self.failUnlessAlmostEqual(50.88279747, point.longitude)
      self.failUnlessAlmostEqual(0.0, point.rmsErrorLatitude)
      self.failUnlessAlmostEqual(0.0, point.rmsErrorLongitude)

   def testPoints(self):
      points = list(opticks.getGcpPoints(self.gcps))
      self.failUnlessEqual(len(points), 5)
      points[1] = points[2]
      opticks.setGcpPoints(self.gcps, points)
      points = list(opticks.getGcpPoints(self.gcps))
      self.failUnlessEqual(points[1], points[2])

class DynamicObjectTestCase(unittest.TestCase):
   def setUp(self):
      self.do = opticks.DynamicObject()

   def tearDown(self):
      self.do = None

   def testDynamicObjectCreation(self):
      self.failIf(self.do is None)

   def testDynamicObjectStoreRetrieve(self):
      self.do['foo'] = 42
      self.failUnlessEqual(self.do['foo'].value, 42)

   def testConfigurationSettings(self):
      settings = opticks.ConfigurationSettings()
      self.failUnless(settings['FileLocations/ImportPath'].valid)

class MetadataTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif", True))
      self.de = opticks.DataElement("ir_bushehr_06jun02_ps.tif")
      self.meta = opticks.DynamicObject(self.de)
      self.meta.clear()
      self.failUnlessEqual(len(self.meta), 0)

   def tearDown(self):
      self.de.destroy()
      self.de = None

   def testBasic(self):
      self.meta['a'] = 10
      self.meta.b = 20
      self.meta['c d'] = 30
      self.failUnlessEqual(len(self.meta), 3)
      self.failUnlessEqual(self.meta.a.value, 10)
      self.failUnlessEqual(self.meta['b'].value, 20)
      self.failUnlessEqual(self.meta['c d'].value, 30)

   def testHierachical(self):
      self.meta['a/b/c'] = 10
      self.meta['a/d'] = 20
      self.failUnlessEqual(len(self.meta), 1)
      self.failUnlessEqual(len(self.meta.a), 2)
      self.failUnlessEqual(len(self.meta.a.b), 1)
      self.failUnlessEqual(self.meta.a.b.c.value, 10)
      self.failUnlessEqual(self.meta['a/b/c'].value, 10)
      self.failUnlessEqual(self.meta.a.d.value, 20)
      self.failUnlessEqual(self.meta['a/d'].value, 20)
      self.meta.clear()
      self.failUnlessEqual(len(self.meta), 0)

   def testDelete(self):
      self.meta.a = 'bcd'
      self.failUnlessEqual(len(self.meta), 1)
      self.failUnlessEqual(self.meta.a.value, 'bcd')
      del self.meta.a
      self.failUnlessEqual(len(self.meta), 0)

      self.meta['bcd'] = 'bcd'
      self.failUnlessEqual(len(self.meta), 1)
      self.failUnlessEqual(self.meta['bcd'].value, 'bcd')
      del self.meta['bcd']
      self.failUnlessEqual(len(self.meta), 0)

class AoiTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif", True))
      self.de = opticks.DataElement("ir_bushehr_06jun02_ps.tif")
      self.aoi = opticks.AOI("ir_bushehr_06jun02_ps.tif|test aoi", True)

   def tearDown(self):
      self.de.destroy()
      self.de = None

   def testAoi(self):
      self.failUnless(self.aoi)
      self.aoi[10,15] = True
      self.aoi[12,15] = True
      self.aoi[10,20] = True
      self.aoi[12,20] = True
      self.failUnless(self.aoi[10,15])
      self.failUnless(self.aoi[12,15])
      self.failUnless(self.aoi[10,20])
      self.failUnless(self.aoi[12,20])
      self.failIf(self.aoi[42,42])
      self.failUnlessEqual(self.aoi.minimalBoundingBox, (10,15,12,20))
      self.failUnlessEqual(len(list(iter(self.aoi))), 4)
      self.failUnlessEqual(list(iter(self.aoi)), [(10,15),(12,15),(10,20),(12,20)])
      ai = opticks.AoiIterator(raster=self.de)
      self.failUnlessEqual([ai.next(),ai.next(),ai.next(),ai.next()], [(0,0),(1,0),(2,0),(3,0)])
      ai = opticks.AoiIterator(boundingBox=(1,3,2,5))
      self.failUnlessEqual([ai.next(),ai.next(),ai.next(),ai.next()], [(1,3),(2,3),(1,4),(2,4)])

class RasterTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif", True))
      self.re = opticks.RasterElement("ir_bushehr_06jun02_ps.tif")
      self.re2 = None

   def tearDown(self):
      self.re.destroy()
      self.re = None
      if self.re2 is not None:
         self.re2.destroy()
         self.re2 = None

   def testGetElement(self):
      self.failUnless(self.re)

   def testDataInfo(self):
      di = opticks.DataInfo(self.re)
      self.failUnlessEqual(di.numRows, 997)
      self.failUnlessEqual(di.numColumns, 1000)
      self.failUnlessEqual(di.numBands, 3)
      self.failUnlessEqual(di.interleaveFormat.value, opticks.InterleaveFormat.BIP)
      self.failUnlessEqual(di.encodingType.value, opticks.EncodingType.INT2UBYTES)
      self.failUnlessEqual(di.encodingTypeSize, 2)
      self.failUnlessEqual(di.badValues, [0])

   def testCreateRasterElement(self):
      args = opticks.RasterElementArgs()
      args.numRows = 10
      args.numColumns = 12
      args.numBands = 2
      args.interleaveFormat = opticks.InterleaveFormat.BSQ
      args.encodingType = opticks.EncodingType.INT1UBYTE
      args.location = opticks.ProcessingLocationPreference.RAM
      args.badValues = [100,101,102]
      self.re2 = opticks.RasterElement("Test element", args)
      self.failUnless(self.re2)
      self.re2.destroy()

   def testDataAccessor(self):
      acc = self.re.getDataAccessor()
      self.failUnless(acc is not None and acc.valid)
      # data is BIP, locations are row, col, band zero indexed
      self.failUnlessEqual(acc.getRow()[0], 1437) # 0, 0, 0
      self.failUnlessEqual(acc.getRow()[1], 1421) # 0, 0, 1
      self.failUnlessEqual(acc.getColumn()[0], 1437) # 0, 0, 0
      acc.nextColumn()
      self.failUnlessEqual(acc.getColumn()[0], 1590) # 0, 1, 0
      acc.nextRow()
      self.failUnlessEqual(acc.getRow()[0], 1558) # 1, 0, 0
      acc.toPixel(0, 0)
      self.failUnlessEqual(acc.getRow()[0], 1437) # 0, 0, 0

      self.failUnlessEqual(acc[2,4], 1365) # 4, 2, 0
      self.failUnlessEqual(acc[4,2], 1654) # 2, 4, 0

   def testDataAccessorArgs(self):
      args = opticks.DataAccessorArgs()
      args.rowStart,args.rowEnd = 10,11
      args.columnStart,args.columnEnd = 5,7
      args.bandStart, args.bandEnd = 1,1
      args.interleaveFormat = opticks.InterleaveFormat.BSQ
      acc = self.re.getDataAccessor(args)
      self.failUnless(acc is not None and acc.valid)
      self.failUnlessEqual(map(lambda ad: ad.contents.value, acc.iterrows()), [1622, 1590])
      acc.toPixel(10,5)
      self.failUnlessEqual(map(lambda ad: ad.contents.value, acc.itercolumns()), [1622,1662,1686])

   def testDataAccessorWrite(self):
      args = opticks.DataAccessorArgs()
      args.rowStart,args.rowEnd = 0,1
      args.columnStart,args.columnEnd = 0,1
      args.interleaveFormat = opticks.InterleaveFormat.BIP
      acc = self.re.getDataAccessor(args)
      self.failUnless(acc is not None and acc.valid)
      def doAssign(acc): acc[0,0] = 10
      self.failUnlessRaises(_opticks.error, doAssign, acc)

      args.writable = True
      acc = self.re.getDataAccessor(args)
      self.failUnless(acc is not None and acc.valid)
      self.failUnlessEqual(acc[0,0], 1437)
      acc[0,0] = 10
      self.re.update()
      self.failUnlessEqual(acc[0,0], 10)

class SignatureTestCase(unittest.TestCase):
   def setUp(self):
      self.sig = opticks.Signature("Test Signature", create=True)

   def tearDown(self):
      self.sig.destroy()
      self.sig = None

   def testSignature(self):
      self.failUnless(self.sig is not None)
      self.sig['foo'] = 42.0
      self.sig['bar'] = 1.23
      self.failUnlessAlmostEqual(self.sig['foo'].value, 42.0)
      self.failUnlessAlmostEqual(self.sig['bar'].value, 1.23)
      self.failUnlessEqual(self.sig.keys(), ['bar','foo'])

class TypesTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif"))
      self.de = opticks.DataElement("ir_bushehr_06jun02_ps.tif")

   def tearDown(self):
      self.de.destroy()
      self.de = None

   def testGetElement(self):
      self.failUnless(self.de)

   def testCastElement(self):
      self.failUnless(self.de.castDataElement("RasterElement"))

   def testProperties(self):
      import os.path
      self.failUnless(self.de.name.endswith("ir_bushehr_06jun02_ps.tif"))
      self.failUnlessEqual(self.de.type, "RasterElement")
      self.failUnlessEqual(os.path.basename(self.de.filename), "ir_bushehr_06jun02_ps.tif")
      self.failUnlessEqual(len(self.de.children), 1)
      self.failUnlessEqual(self.de.children[0].name, "Corner Coordinates")
      self.failUnlessEqual(self.de.children[0].type, "GcpList")

class LayerTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif"))

   def tearDown(self):
      opticks.View().destroy()

   def testLayerAccess(self):
      rl = opticks.Layer(typ="RasterLayer")
      self.failUnless(rl)
      self.failUnless(rl.name.endswith("ir_bushehr_06jun02_ps.tif"))
      gl = opticks.Layer()
      self.failUnless(gl)
      self.failUnlessEqual(gl.name, "Corner Coordinates")
      rl = opticks.Layer("|ir_bushehr_06jun02_ps.tif")
      self.failUnless(rl)
      self.failUnless(rl.name.endswith("ir_bushehr_06jun02_ps.tif"))
      rl = opticks.Layer("ir_bushehr_06jun02_ps.tif|ir_bushehr_06jun02_ps.tif")
      self.failUnless(rl)
      self.failUnless(rl.name.endswith("ir_bushehr_06jun02_ps.tif"))
      self.failUnlessRaises(opticks.SimpleApiError, opticks.Layer, "ir_bushehr_06jun02_ps.tif|ir_bushehr_06jun02_ps.tif", "BadType")
      rl = opticks.Layer("ir_bushehr_06jun02_ps.tif|ir_bushehr_06jun02_ps.tif", "RasterLayer")
      self.failUnless(rl)
      self.failUnless(rl.name.endswith("ir_bushehr_06jun02_ps.tif"))
      gl = opticks.Layer("ir_bushehr_06jun02_ps.tif|Corner Coordinates", "GcpLayer")
      self.failUnless(gl)
      self.failUnlessEqual(gl.name, "Corner Coordinates")
      self.failUnlessEqual(gl.element.name, "Corner Coordinates")
      self.failUnless(gl.view)

   def testScaleOffset(self):
      gl = opticks.Layer("|Corner Coordinates")
      self.failUnlessEqual(gl.scale, (1.0, 1.0))
      self.failUnlessEqual(gl.offset, (0.0, 0.0))
      gl.scale = 0.5,0.25
      gl.offset = 100,200
      self.failUnlessEqual(gl.scale, (0.5, 0.25))
      self.failUnlessEqual(gl.offset, (100.0, 200.0))

   def testDisplayed(self):
      gl = opticks.Layer("|Corner Coordinates")
      self.failUnless(gl.displayed)
      gl.hide()
      gl.hide() # ensure an exception is not thrown
      self.failIf(gl.displayed)
      gl.show()
      self.failUnless(gl.displayed)

   def testDisplayIndex(self):
      gl = opticks.Layer("|Corner Coordinates")
      rl = opticks.Layer(typ="RasterLayer")
      self.failUnlessEqual(gl.displayindex, 0)
      self.failUnlessEqual(rl.displayindex, 1)
      gl.displayindex = 1
      self.failUnlessEqual(gl.displayindex, 1)
      self.failUnlessEqual(rl.displayindex, 0)

   def testConversion(self):
      rl = opticks.Layer(typ="RasterLayer")
      rl.derive(typ="ThresholdLayer")
      tl = opticks.Layer(typ="ThresholdLayer")
      self.failUnlessEqual(tl.type, "ThresholdLayer")
      tl.convert("PseudocolorLayer")
      self.failUnlessEqual(tl.type, "PseudocolorLayer")

   def testThresholdLayer(self):
      rl = opticks.Layer(typ="RasterLayer")
      rl.derive(typ="ThresholdLayer")
      tl = opticks.Layer(typ="ThresholdLayer")
      tl.passarea = opticks.PassArea.OUTSIDE
      self.failUnlessEqual(tl.passarea, opticks.PassArea.OUTSIDE)
      tl.thresholds = 10, 15
      self.failUnlessEqual(tl.thresholds, (10.0, 15.0))
      tl.regionunits = opticks.RegionUnits.STD_DEV
      self.failUnlessEqual(tl.regionunits, opticks.RegionUnits.STD_DEV)

   def testColormap(self):
      rl = opticks.RasterLayer()
      self.failUnlessEqual(rl.colormapname, "Default Grayscale")
      rl.colormapname='StopLight'
      self.failUnlessEqual(rl.colormapname, "Stop Light")
      rl.colormapname='RedTemp'
      self.failUnlessEqual(rl.colormapname, "RedTemp")
      rl.colormapname='WeatherMap.clu'
      self.failUnlessEqual(rl.colormapname, "WeatherMap")
      rl.colormapname='Hot Iron'
      self.failUnlessEqual(rl.colormapname, "Hot Iron")
      self.failUnlessRaises(opticks.SimpleApiError, rl.setcolormapname, "foo")
      m = zip(xrange(256), xrange(256), (0,) * 256)
      rl.setcolormap(m, "Yellow")
      self.failUnlessEqual(map(opticks.Color, m), rl.colormap)
      self.failUnlessEqual(rl.colormapname, "Yellow")
      m.reverse()
      rl.colormap = m
      self.failUnlessEqual(map(opticks.Color, m), rl.colormap)
      self.failUnlessEqual(rl.colormapname, "")

   def testStatistics(self):
      rl = opticks.RasterLayer()
      stat = rl.getstatistics(opticks.RasterChannel.GRAY)
      self.failUnlessAlmostEqual(stat.min, 8.0)
      self.failUnlessAlmostEqual(stat.max, 2047.0)
      self.failUnlessAlmostEqual(stat.mean, 1127.29884817)
      self.failUnlessAlmostEqual(stat.stddev, 428.13824196)
      self.failUnlessEqual(stat.resolution, 1)
      self.failUnlessEqual(len(stat.histogramCenters), 256)
      self.failUnlessEqual(len(stat.histogramCounts), 256)
      self.failUnlessEqual(len(stat.percentiles), 1001)

   def testDisplayMode(self):
      rl = opticks.RasterLayer()
      rl.rgbdisplayed = True
      self.failUnlessEqual(rl.rgbdisplayed, True)
      rl.rgbdisplayed = False
      self.failUnlessEqual(rl.rgbdisplayed, False)

   def testDisplayBand(self):
      rl = opticks.RasterLayer()
      rl.setdisplayedband(opticks.RasterChannel.GRAY, 1)
      (bandnum, re) = rl.getdisplayedband(opticks.RasterChannel.GRAY)
      self.failUnlessEqual(bandnum, 1)
      self.failUnlessEqual(re.name, rl.element.name)
      self.failUnlessEqual(re.handle, rl.element.handle)

      rl.setdisplayedband(opticks.RasterChannel.GRAY, 1000) #bandnum intentionally out-of-range
      (bandnum, re) = rl.getdisplayedband(opticks.RasterChannel.GRAY)
      self.failUnlessEqual(bandnum, 0)
      self.failUnlessEqual(re, None)

      rl.setdisplayedband(opticks.RasterChannel.GRAY, 1, rl.element)
      (bandnum, re) = rl.getdisplayedband(opticks.RasterChannel.GRAY)
      self.failUnlessEqual(bandnum, 1)
      self.failUnlessEqual(re.name, rl.element.name)
      self.failUnlessEqual(re.handle, rl.element.handle)

      rl.setrgbbands(red=0, green=1, blue=2)
      (rednum, red) = rl.getdisplayedband(opticks.RasterChannel.RED)
      (greennum, green) = rl.getdisplayedband(opticks.RasterChannel.GREEN)
      (bluenum, blue) = rl.getdisplayedband(opticks.RasterChannel.BLUE)
      self.failUnlessEqual(rl.rgbdisplayed, True)
      self.failUnlessEqual(rednum, 0)
      self.failUnlessEqual(greennum, 1)
      self.failUnlessEqual(bluenum, 2)
      self.failUnlessEqual(red.handle, rl.element.handle)
      self.failUnlessEqual(green.handle, rl.element.handle)
      self.failUnlessEqual(blue.handle, rl.element.handle)

      rl.setgrayband(2)
      (graynum, gray) = rl.getdisplayedband(opticks.RasterChannel.GRAY)
      self.failUnlessEqual(rl.rgbdisplayed, False)
      self.failUnlessEqual(graynum, 2)
      self.failUnlessEqual(gray.handle, rl.element.handle)

class ViewTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif"))
      self.v = opticks.View()

   def tearDown(self):
      self.v.destroy()
      self.v = None

   def testViewProperties(self):
      self.failUnlessEqual(self.v.type, "Spatial Data View")
      self.failUnless(self.v.name.endswith("ir_bushehr_06jun02_ps.tif"))
      self.v.name = "foobar"
      self.failUnlessEqual(self.v.name, "foobar")
      self.failUnlessEqual(self.v.primaryRasterElement.handle, opticks.DataElement("ir_bushehr_06jun02_ps.tif").handle)

class ViewCreateTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif"), True)
      self.element = opticks.DataElement("ir_bushehr_06jun02_ps.tif")

   def tearDown(self):
      self.element.destroy()
      self.element = None

   def testViewCreate(self):
      self.failUnless(opticks.View("foobar", element=self.element, create=True))
