from ctypes import *
from ..utils import genwrap
import types
from .. import errors

__doc__ = "Functions and data types for dealing with AOIs"

class AoiIterator(Structure):
   "An iterator over an AOI."
   _fields_ = [("handle", c_void_p)]
   __owns = False

   def __init__(self, element, raster = None, boundingBox = None):
      """Create a new AOI iteraor over a specified raster element or bouding box.
         Pass in either a raster element or a 4-tuple (x1, y1, x2, y2) bounding box."""
      assert(raster is not None or boundingBox is not None)
      assert(not (raster is not None and boundingBox is not None))

      try:
         if raster is not None:
            self.handle = genwrap("createAoiIteratorOverRaster", AoiIterator, types.DataElement, types.DataElement)(element, raster).handle
         else:
            self.handle = genwrap("createAoiIteratorOverBoundingBox", AoiIterator, types.DataElement, c_int32, c_int32, c_int32, c_int32)(element, boundingBox[0], boundingBox[1], boundingBox[2], boundingBox[3]).handle
         self.__last = False
      except errors.SimpleApiError,e:
         if e.code == errors.SIMPLE_NOT_FOUND:
            self.__last = False
      self.__first,self.__owns = True,True

   def __del__(self):
      if self.__owns:
         genwrap("freeAoiIterator", None, AoiIterator)(self)

   def __iter__(self):
      return self

   def next(self):
      if not self.__first and not self.__last:
         if self._nextAoiIterator(self) == 0:
            self.__last = True
      if self.__last:
         raise StopIteration()
      self.__first = False
      x, y = c_int32(-1), c_int32(-1)
      self._getAoiIteratorLocation(self, byref(x), byref(y))
      return x.value, y.value
AoiIterator._nextAoiIterator = genwrap("nextAoiIterator", c_int, AoiIterator)
AoiIterator._getAoiIteratorLocation = genwrap("getAoiIteratorLocation", c_int, AoiIterator, POINTER(c_int32), POINTER(c_int32))

class AOI(types.DataElement):
   "An AOI with support for iteration and random access."
   _getAoiValue = genwrap("getAoiValue", c_int, types.DataElement, c_int32, c_int32)
   _setAoiValue = genwrap("setAoiValue", c_int, types.DataElement, c_uint32, c_uint32, c_int)
   _getAoiMinimalBoundingBox = genwrap("getAoiMinimalBoundingBox", c_int, types.DataElement, POINTER(c_int32), POINTER(c_int32), POINTER(c_int32), POINTER(c_int32))

   def __init__(self, name=None, create=False, element=None):
      """Get an AOI.
         If name is specified, get the named AOI.
         If the named AOI does not exist an attempt will be made to create it if create is True.
         If element is specified, use an existing DataElement."""
      assert(name is not None or element is not None)
      assert(not (name is not None and element is not None))
      if element is not None:
         self.handle = element.handle
      else:
         types.DataElement.__init__(self, name, create=create, typ="AoiElement")

   def __getitem__(self, (x, y)):
      return bool(self._getAoiValue(self, x, y))

   def __setitem__(self, (x, y), value):
      self._setAoiValue(self, x, y, int(value))

   @property
   def minimalBoundingBox(self):
      x1, y1, x2, y2 = c_int32(0), c_int32(0), c_int32(0), c_int32(0)
      self._getAoiMinimalBoundingBox(self, byref(x1), byref(y1), byref(x2), byref(y2))
      return x1.value,y1.value,x2.value,y2.value

   def __iter__(self):
      return apply(self.iterbounding, self.minimalBoundingBox)

   def iterraster(self, rasterElement):
      "Create an iterator over an AOI bounded by the extents of a RasterElement."
      return AoiIterator(self, raster = rasterElement)

   def iterbounding(self, x1, y1, x2, y2):
      "Create an iterator over an AOI bounded by the specified pixel coordinates."
      return AoiIterator(self, boundingBox = (x1, y1, x2, y2))

####
# Test suite
####
import unittest
from ..utils import loadTestFile
class AoiTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif", True))
      self.de = types.DataElement("ir_bushehr_06jun02_ps.tif")
      self.aoi = AOI("ir_bushehr_06jun02_ps.tif|test aoi", True)

   def tearDown(self):
      self.de.destroy()
      self.de = None

   def testAoi(self):
      self.failUnless(self.aoi)
      self.aoi[10,15] = True
      self.aoi[12,15] = True
      self.aoi[10,20] = True
      self.aoi[12,20] = True
      self.failUnless(self.aoi[10,15])
      self.failUnless(self.aoi[12,15])
      self.failUnless(self.aoi[10,20])
      self.failUnless(self.aoi[12,20])
      self.failIf(self.aoi[42,42])
      self.failUnlessEqual(self.aoi.minimalBoundingBox, (10,15,12,20))
      self.failUnlessEqual(len(list(iter(self.aoi))), 4)
      self.failUnlessEqual(list(iter(self.aoi)), [(10,15),(12,15),(10,20),(12,20)])
