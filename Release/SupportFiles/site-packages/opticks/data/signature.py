from ctypes import *
from UserDict import DictMixin
from ..utils import genwrap, stringBufferWrap
from .. import dynamictypes
import types

__doc__ = "Functions and data types for dealing with Signatures"

class Signature(types.DataElement, DictMixin):
   "A signature data type."
   _getSignatureDataSetCount = genwrap("getSignatureDataSetCount", c_uint32, types.DataElement)
   _getSignatureDataSetName = genwrap("getSignatureDataSetName", c_uint32, types.DataElement, c_uint32, c_char_p, c_uint32)
   _getSignatureDataSet = genwrap("getSignatureDataSet", dynamictypes.DataVariant, types.DataElement, c_char_p)
   _setSignatureDataSet = genwrap("setSignatureDataSet", c_int, types.DataElement, c_char_p, dynamictypes.DataVariant)

   def __init__(self, name=None, create=False, element=None):
      """Get a signature.
         If name is specified, get the named signature.
         If the signature does not exist and create is True, attempt to create the signature.
         If element is specified, use an existing DataElement."""
      assert(name is not None or element is not None)
      assert(not (name is not None and element is not None))
      if element is not None:
         self.handle = element.handle
      else:
         types.DataElement.__init__(self, name, create=create, typ="Signature")

   def keys(self):
      k = []
      for idx in range(self._getSignatureDataSetCount(self)):
         k.append(stringBufferWrap(self._getSignatureDataSetName, self, idx))
      return k

   def __getitem__(self, key):
      return self._getSignatureDataSet(self, key)

   def __setitem__(self, key, value):
      if not isinstance(value, dynamictypes.DataVariant):
         value = dynamictypes.DataVariant(value)
      self._setSignatureDataSet(self, key, value)

   def __delitem__(self, key):
      raise NotImplementedError()

class SignatureSet(types.DataElement):
   "A signature set data type."
   _getSignatureSetCount = genwrap("getSignatureSetCount", c_uint32, types.DataElement)
   _getSignatureSetSignature = genwrap("getSignatureSetSignature", types.DataElement, types.DataElement, c_uint32)

   def __init__(self, name=None, create=False, element=None):
      """Get a signature set.
         If name is specified, get the named signature set.
         If the signature set does not exist and create is True, attempt to create the signature set.
         If element is specified, use an existing DataElement."""
      assert(name is not None or element is not None)
      assert(not (name is not None and element is not None))
      if element is not None:
         self.handle = element.handle
      else:
         types.DataElement.__init__(self, name, create=create, typ="SignatureSet")

   def __len__(self):
      return int(self._getSignatureSetCount(self))

   def __getitem__(self, index):
      if index >= len(self):
         raise IndexError()
      return Signature(element=self._getSignatureSetSignature(self, index))

####
# Test suite
####
import unittest
from ..utils import loadTestFile
class SignatureTestCase(unittest.TestCase):
   def setUp(self):
      self.sig = Signature("Test Signature", create=True)

   def tearDown(self):
      self.sig.destroy()
      self.sig = None

   def testSignature(self):
      self.failUnless(self.sig is not None)
      self.sig['foo'] = 42.0
      self.sig['bar'] = 1.23
      self.failUnlessAlmostEqual(self.sig['foo'].value, 42.0)
      self.failUnlessAlmostEqual(self.sig['bar'].value, 1.23)
      self.failUnlessEqual(self.sig.keys(), ['bar','foo'])
