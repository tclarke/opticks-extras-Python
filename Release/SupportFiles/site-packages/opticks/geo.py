from ctypes import *
from .utils import genwrap
import data

__doc__ = "Functions and data types for dealing with geospatial coordinates, georeferences, and related functionality."

####
# Data types
####
class Gcp(Structure):
   _fields_ = [("pixelX", c_double),
               ("pixelY", c_double),
               ("__reserved1", c_double),
               ("latitude", c_double),
               ("longitude", c_double),
               ("__reserved2", c_double),
               ("rmsErrorLatitude", c_double),
               ("rmsErrorLongitude", c_double),
               ("__reserved3", c_double)]

   def __repr__(self):
      return "<GCP Point (%5.2f, %5.2f)->(%3.8f,%3.8f) err: (%.8f,%.8f)>" % (
                               self.pixelX, self.pixelY,
                               self.latitude, self.longitude,
                               self.rmsErrorLatitude, self.rmsErrorLongitude)

   def __eq__(self, other):
      return self.pixelX == other.pixelX and self.pixelY == other.pixelY and self.latitude == other.latitude and self.longitude == other.longitude

def getGcpPoints(gcpList=None):
   "Get the list of GCP points and return them as a python list-like object"
   cnt = _getGcpCount(gcpList)
   lst = (Gcp * cnt)()
   _getGcpPoints(gcpList, cast(lst, POINTER(Gcp)))
   return lst

def setGcpPoints(gcpList=None, points=[]):
   "Set the list of GCP points from a python list-like objects"
   cnt = len(points)
   typ = (Gcp * cnt)
   if type(points) != type:
      tmp = typ()
      for idx in range(cnt):
         tmp[idx] = points[idx]
      points = tmp
   _setGcpPoints(gcpList, cnt, cast(points, POINTER(Gcp)))
   return cnt

####
# Function prototypes
####
# GeographicData.h
_getGcpCount = genwrap("getGcpCount", c_uint32, data.types.DataElement)
_getGcpPoint = genwrap("getGcpPoint", Gcp, data.types.DataElement, c_uint32)
_getGcpPoints = genwrap("getGcpPoints", c_uint32, data.types.DataElement, POINTER(Gcp))
_setGcpPoints = genwrap("setGcpPoints", c_uint32, data.types.DataElement, c_uint32, POINTER(Gcp))

####
# Test suite
####
import unittest
from .utils import loadTestFile
class GeoTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif"))
      self.re = data.types.DataElement("ir_bushehr_06jun02_ps.tif")
      self.gcps = data.types.DataElement("ir_bushehr_06jun02_ps.tif|Corner Coordinates")

   def tearDown(self):
      self.gcps = None
      self.re.destroy()
      self.re = None

   def testCount(self):
      self.failUnlessEqual(_getGcpCount(self.gcps), 5)

   def testGetPoint(self):
      point = _getGcpPoint(self.gcps, 1)
      self.failUnlessAlmostEqual(0.0, point.pixelX)
      self.failUnlessAlmostEqual(996.0, point.pixelY)
      self.failUnlessAlmostEqual(28.82643037, point.latitude)
      self.failUnlessAlmostEqual(50.88279747, point.longitude)
      self.failUnlessAlmostEqual(0.0, point.rmsErrorLatitude)
      self.failUnlessAlmostEqual(0.0, point.rmsErrorLongitude)

   def testPoints(self):
      points = list(getGcpPoints(self.gcps))
      self.failUnlessEqual(len(points), 5)
      points[1] = points[2]
      setGcpPoints(self.gcps, points)
      points = list(getGcpPoints(self.gcps))
      self.failUnlessEqual(points[1], points[2])
