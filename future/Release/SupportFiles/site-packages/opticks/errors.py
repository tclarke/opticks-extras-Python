from ctypes import *
from . import _opticks
from utils import genwrap

__doc__ = "Error handling and reporting functionality."

####
# Automatic error handling
####
class SimpleApiError(_opticks.error):
   """Python exception wrapper for a Simple API error.
    The 'code' member contains the numeric error code.
    The 'message' member contains the user readable error message.
    The 'result' member contains the return result from the original function call."""
   def __init__(self, code, result=None):
      _opticks.error.__init__(self, code, getErrorString(code))
      self.code = code
      self.message = getErrorString(code)
      self.result = result

def simpleErrorCheck(result, func, args):
   "This errcheck function queries the last error state and raises an exception if an error occured"
   err = getLastError()
   if err != SIMPLE_NO_ERROR:
      raise SimpleApiError(err, result)
   return args

####
# Constants and enums
####
SIMPLE_NO_ERROR = 0
SIMPLE_WRONG_TYPE = 1
SIMPLE_NOT_FOUND = 2
SIMPLE_BAD_PARAMS = 3
SIMPLE_BUFFER_SIZE = 4
SIMPLE_NO_MEM = 5
SIMPLE_EXISTS = 6
SIMPLE_WRONG_VIEW_TYPE = 7
SIMPLE_OTHER_FAILURE = -1

####
# Function prototypes
####
# SimpleApiErrors.h
getLastError = genwrap("getLastError", c_int, errorCheck=False)
getErrorString = genwrap("getErrorString", c_char_p, c_int, errorCheck=False)
setLastError = genwrap("setLastError", None, c_int, errorCheck=False)

####
# Test suite
####
import unittest
class ErrorsTestCase(unittest.TestCase):
   def tearDown(self):
      setLastError(SIMPLE_NO_ERROR)

   def testErrorSet(self):
      setLastError(SIMPLE_WRONG_TYPE)
      self.assertEqual(getLastError(), SIMPLE_WRONG_TYPE)
