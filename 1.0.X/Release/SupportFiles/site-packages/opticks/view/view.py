from ctypes import *
from ..utils import genwrap,stringBufferWrap
from .. import errors, data
import layer

__doc__ = "Functions and data types for dealing with views."

class View(Structure):
   _fields_ = [("handle", c_void_p)]
   __owns = False

   def __init__(self, name=None, typ=None, element=None, create=False):
      """Get a View by name.
         The name may be a session ID or a view name.
         If typ is None, access any view type. Otherwise, access only views of the
         type specified.
         
         If create is True, create a new View of typ with name. If the new view
         requires a DataElement (currently SpatialDataView) then element should
         contain the DataElement. If create is True and the View exists, an exception
         will be raised.
         If create is True and element is not None, typ is assumed to be
         SpatialDataView.
         """
      if create:
         if typ is None and element is not None:
            typ = "Spatial Data View"
         self.handle = genwrap("createView", View, c_char_p, c_char_p, data.types.DataElement)(name, typ, element).handle
      else:
         self.handle = genwrap("getView", View, c_char_p, c_char_p)(name, typ).handle
      self.__owns = False

   def __del__(self):
      if self.__owns:
         genwrap("destroyView", None, View, errorCheck=False)(self)

   def destroy(self, val=True):
      """Mark this view for destruction. When the view object is garbage collected
         it will be destroyed. If val is False, destruction will be cancelled."""
      self.__owns = val

   def getname(self):
      return stringBufferWrap(self._getViewName, self)
   def setname(self, name):
      self._setViewName(self, name)
   name = property(getname, setname)

   @property
   def type(self):
      return stringBufferWrap(self._getViewType, self)

   @property
   def primaryRasterElement(self):
      return data.raster.RasterElement(element=self._getViewPrimaryRasterElement(self))

   def createLayer(self, element, typ, name=None):
      """Create a new typ layer to display element. The name of the Layer
         will be name. If name is None, the name of the element will be used."""
      return genwrap("createLayer", layer.Layer, View, data.types.DataElement, c_char_p, c_char_p)(self, element, typ, name)

   def iterlayers(self):
      def doiter(view):
         getViewLayer = genwrap("getViewLayer", layer.Layer, View, c_uint32)
         idx = 0
         while True:
            try:
               yield getViewLayer(view, idx)
            except errors.SimpleApiError, err:
               if err.code == errors.SIMPLE_NOT_FOUND:
                  return
               raise
            finally:
               idx += 1
      return doiter(self)

View._getViewName = genwrap("getViewName", c_uint32, View, c_char_p, c_uint32)
View._setViewName = genwrap("setViewName", c_int, View, c_char_p)
View._getViewType = genwrap("getViewType", c_uint32, View, c_char_p, c_uint32)
View._getViewPrimaryRasterElement = genwrap("getViewPrimaryRasterElement", data.types.DataElement, View)

####
# Test suite
####
import unittest
from ..utils import loadTestFile
from .. import errors
class ViewTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif"))
      self.v = View()

   def tearDown(self):
      self.v.destroy()
      self.v = None

   def testViewProperties(self):
      self.failUnlessEqual(self.v.type, "Spatial Data View")
      self.failUnless(self.v.name.endswith("ir_bushehr_06jun02_ps.tif"))
      self.v.name = "foobar"
      self.failUnlessEqual(self.v.name, "foobar")
      self.failUnlessEqual(self.v.primaryRasterElement.handle, data.types.DataElement("ir_bushehr_06jun02_ps.tif").handle)

class ViewCreateTestCase(unittest.TestCase):
   def setUp(self):
      self.failUnless(loadTestFile("ir_bushehr_06jun02_ps.tif"), True)
      self.element = data.types.DataElement("ir_bushehr_06jun02_ps.tif")

   def tearDown(self):
      self.element.destroy()
      self.element = None

   def testViewCreate(self):
      self.failUnless(View("foobar", element=self.element, create=True))
